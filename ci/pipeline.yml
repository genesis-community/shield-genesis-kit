---
#
# ci/pipeline.yml
#
# Pipeline structure file for a Genesis Release pipeline
#
# DO NOT MAKE CHANGES TO THIS FILE.  Instead, modify
# ci/settings.yml and override what needs overridden.
# This uses spruce, so you have some options there.
#
# author:  James Hunt <james@niftylogic.com>
# created: 2018-01-23

meta:
  kit:      (( param "Which kit is this pipeline for?" ))
  name:     (( concat meta.kit "-genesis-kit" ))
  release:  (( concat meta.kit " Genesis Kit" ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))
  pipeline: (( grab meta.name ))

  vault:
    url:   (( param "Please provide the address of your Vault" ))
    token: (( param "Please provide a Vault Token" ))

  git:
    email: ci@starkandwayne.com
    name:  Stark & Wayne CI Bot

  image:
    name: starkandwayne/genesis_ci
    tag: latest

  aws:
    bucket:      genesis-pipeline
    region_name: us-east-1
    access_key: (( param "Please set your AWS Access Key ID for your pipeline S3 Bucket" ))
    secret_key: (( param "Please set your AWS Secret Key ID for your pipeline S3 Bucket" ))

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token to be used for creating github releases (do you have a ci-bot?)" ))

  bosh:
    uri:        (( param "Please specify the Genesis CI BOSH Director URI" ))
    cacert:     (( param "Please specify the Genesis CI BOSH Director Root CA cert" ))
    username:   admin
    password:   (( param "Please specify the Genesis CI BOSH Director admin password" ))

  slack:
    webhook:       (( param "Please specify your Slack Incoming Webhook Integration URL" ))
    success_moji:  ":airplane_departure:"
    fail_moji:     ":airplane_arriving:"
    upset_moji:    ":sad_panda:"
    channel:       (( param "Please specify the channel (#name) or user (@user) to send messages to" ))
    username:      concourse
    icon:          http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
    fail_url: '(( concat "<" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Concourse Failure! " meta.slack.upset_moji ">" ))'

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - testflight
      - rc
      - shipit
      - major
      - minor

jobs:
  - name: testflight
    public: true
    serial: true
    serial_groups: [genesis-ci]
    plan:
    - name: main
      do:
      - name: get
        aggregate:
        - { get: git, trigger: true }
      - name: testflights
        aggregate:
        - name: testflight
          task: testflight
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: (( grab meta.image.name ))
                tag:        (( grab meta.image.tag ))
            inputs:
              - { name: git, path: kit }
            run:
              path: ./kit/ci/scripts/testflight
              args: []
            params:
              GENESIS_HONOR_ENV:    1
              GIT_NAME:             (( grab meta.git.name ))
              GIT_EMAIL:            (( grab meta.git.email ))
              VAULT_URI:            (( grab meta.vault.url ))
              VAULT_TOKEN:          (( grab meta.vault.token ))
              KIT_SHORTNAME:        (( grab meta.kit ))
              BOSH_ENVIRONMENT:     (( grab meta.bosh.uri ))
              BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
              BOSH_CLIENT:          (( grab meta.bosh.username ))
              BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:    '(( concat meta.slack.fail_url " " meta.pipeline ": testflight job failed" ))'

  - name: rc
    public: true
    plan:
    - do:
      - aggregate:
          - { get: git,     trigger: true,  passed: [testflight] }
          - { get: version, trigger: true, params: {pre: rc} }
      - task: release-notes
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - { name: git }
          run:
            path: sh
            args:
            - -ce
            - |
              cd git
              if [ -f ci/release_notes.md ]; then
                echo "######   RELEASE NOTES   ###############"
                echo
                cat ci/release_notes.md
                echo
                echo "########################################"
                echo
              else
                echo "NO RELEASE NOTES HAVE BEEN WRITTEN"
                echo "You *might* want to do that before"
                echo "hitting (+) on that shipit job..."
                echo
              fi
      - put: version
        params: {file: version/number}
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:    '(( concat meta.slack.fail_url " " meta.pipeline ": rc job failed" ))'

  - name: minor
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: minor} }
      - { put: version,                 params: {file: version/number} }
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:    '(( concat meta.slack.fail_url " " meta.pipeline ": minor job failed" ))'

  - name: major
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: major} }
      - { put: version,                 params: {file: version/number} }
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:    '(( concat meta.slack.fail_url " " meta.pipeline ": major job failed" ))'

  - name: shipit
    public: true
    serial: true
    plan:
    - do:
      - name: inputs
        aggregate:
          - { get: version, passed: [rc], params: {bump: final} }
          - { get: git,     passed: [rc] }
      - name: release
        task: release
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - name: version
            - name: git
          outputs:
            - name: gh
            - name: pushme
            - name: notifications
          run:
            path: ./git/ci/scripts/shipit
            args: []
          params:
            REPO_ROOT:    git
            VERSION_FROM: version/number
            RELEASE_ROOT: gh
            REPO_OUT:     pushme
            NOTIFICATION_OUT: notifications
            BRANCH:        (( grab meta.github.branch ))
            GITHUB_OWNER:  (( grab meta.github.owner ))
            GIT_EMAIL:     (( grab meta.git.email ))
            GIT_NAME:      (( grab meta.git.name ))
            KIT_SHORTNAME: (( grab meta.kit ))

      - name: upload-git
        put: git
        params:
          rebase: true
          repository: pushme/git
      - name: github-release
        put: github
        params:
          name:   gh/name
          tag:    gh/tag
          body:   gh/notes.md
          globs: [gh/artifacts/*]
      - name: version-bump
        put: version
        params:
          bump: patch
      - name: notify
        aggregate:
        - put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text_file: notifications/message
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:    '(( concat meta.slack.fail_url " " meta.pipeline ": shipit job failed" ))'

resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

resources:
  - name: git
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))

  - name: version
    type: semver
    source :
      driver:            s3
      bucket:            (( grab meta.aws.bucket ))
      region_name:       (( grab meta.aws.region_name ))
      key:               (( concat meta.name "/version" ))
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))
      initial_version:   (( grab meta.initial_version || "0.0.1" ))

  - name: notify
    type: slack-notification
    source:
      url: (( grab meta.slack.webhook ))

  - name: github
    type: github-release
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))
